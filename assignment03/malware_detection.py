import os
import argparse
from taskC_live import start_real_time_monitoring, check_file_against_signatures, load_signature_database

""" *** IMPORTANT ***
    Make sure to setup the enviroment using reset.py -> setup.py"""
def malware_detection_tool(directory, signature_file, output_file, real_time=False):    
    signature_db = load_signature_database(signature_file)
    if not signature_db:
        print(f"Error: No signatures loaded from {signature_file}. Exiting...")
        return
    quarantine_dir = "quarantine"
    
    if real_time:
        #scan real time considering the user's option.
        print(f"Starting real-time monitoring on directory: {directory}")
        start_real_time_monitoring(directory, signature_db, output_file, quarantine_dir)
    else:
        #else we do a full scan for the given directory and eliminate all threats.
        print(f"Starting scan of directory: {directory}")
        for root, dirs, files in os.walk(directory):
            for file_name in files:
                file_path = os.path.join(root, file_name)
                check_file_against_signatures(file_path, signature_db, quarantine_dir, output_file)
        print(f"Scan complete. Results saved to {output_file}.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Real-Time Malware Detection and Monitoring Tool")
    parser.add_argument('-d', '--directory', required=True, help="Directory to scan")
    parser.add_argument('-s', '--signature_file', required=True, help="Path to the malware signature database")
    parser.add_argument('-o', '--output_file', required=True, help="File to save a report of infected files")
    parser.add_argument('-r', '--real_time', action='store_true', help="Run in real-time mode to monitor the directory")
    
    args = parser.parse_args()
    
    malware_detection_tool(args.directory, args.signature_file, args.output_file, real_time=args.real_time)
